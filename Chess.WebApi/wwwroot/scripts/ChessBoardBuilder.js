import { DomManipulator } from './DomManipulator.js';
import { Square } from './Square.js';
var a = 'A';
var h = 'H';
var table = 'table';
var th = 'th';
var tr = 'tr';
var td = 'td';
var tc = 'tc';
var id = 'id';
var selected = 'selected';
var InitialState = [
    ['♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜'],
    ['♟', '♟', '♟', '♟', '♟', '♟', '♟', '♟'],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    ['♙', '♙', '♙', '♙', '♙', '♙', '♙', '♙'],
    ['♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖']
];
var State = [
    ['♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜'],
    ['♟', '♟', '♟', '♟', '♟', '♟', '♟', '♟'],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    ['♙', '♙', '♙', '♙', '♙', '♙', '♙', '♙'],
    ['♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖']
];
var ChessBoardBuilder = /** @class */ (function () {
    function ChessBoardBuilder() {
        this.domManipulator = new DomManipulator();
        this.moveFrom = null;
        this.whiteOnTopWhenShow = false;
        this.showChessBoard();
    }
    ChessBoardBuilder.prototype.createChessBoard = function () {
        var body = document.getElementsByTagName('body')[0];
        var board = this.domManipulator.createElement(table, body);
        board === null || board === void 0 ? void 0 : board.setAttribute('class', 'chess-board');
        var tableBody = this.domManipulator.createElement('tbody', board);
        this.createTableColumns(tableBody);
        this.createSquares(tableBody);
    };
    ChessBoardBuilder.prototype.createTableColumns = function (tableBody) {
        var header = this.domManipulator.createElement(tr, tableBody);
        this.domManipulator.createElement(th, header);
        for (var columnIndex = 0; columnIndex < 8; columnIndex++) {
            this.createTableHeaderCell(header, tc + columnIndex + 1, this.getColumnText(columnIndex));
        }
    };
    ChessBoardBuilder.prototype.createTableHeaderCell = function (parent, idValue, text) {
        var header = this.domManipulator.createElement(th, parent);
        header.setAttribute(id, idValue);
        header.textContent = text;
    };
    ChessBoardBuilder.prototype.createTableRank = function (tableBody, rankNumber) {
        var rank = this.domManipulator.createElement(tr, tableBody);
        this.createTableHeaderCell(rank, tr + rankNumber, rankNumber.toString());
        return rank;
    };
    ChessBoardBuilder.prototype.createSquares = function (tableBody) {
        for (var rankIndex = 0; rankIndex < 8; rankIndex++) {
            var rankNumber = this.whiteOnTopWhenShow ? rankIndex + 1 : 8 - rankIndex;
            var rank = this.createTableRank(tableBody, rankNumber);
            for (var columnIndex = 0; columnIndex < 8; columnIndex++) {
                var square = this.domManipulator.createElement(td, rank);
                square.setAttribute(id, this.getColumnText(columnIndex) + rankNumber);
                square.onclick = this.squareOnClick.bind(this);
                square.setAttribute('class', (rankIndex + columnIndex) % 2 == 1 ? 'dark' : 'light');
                square.textContent = this.isWhiteOnTopInStateRepresentation() ?
                    this.getState(rankNumber - 1, this.whiteOnTopWhenShow ? columnIndex : 7 - columnIndex) :
                    this.getState(this.whiteOnTopWhenShow ? 7 - rankIndex : rankIndex, this.whiteOnTopWhenShow ? 7 - columnIndex : columnIndex);
            }
        }
    };
    ChessBoardBuilder.prototype.squareOnClick = function (event) {
        var _this = this;
        if (this.moveFrom == null) {
            this.moveFrom = event.srcElement;
            this.moveFrom.classList.add(selected);
        }
        else {
            this.moveFrom.classList.remove(selected);
            var toSquare_1 = this.getSquare(event.srcElement);
            var fromSquare_1 = this.getSquare(this.moveFrom);
            var request_1 = new XMLHttpRequest();
            request_1.open('PUT', 'KnightsTale/api/game/move');
            request_1.setRequestHeader('content-type', 'application/json');
            request_1.send(JSON.stringify(this.getMove(fromSquare_1, toSquare_1)));
            request_1.onreadystatechange = function () {
                if (request_1.readyState == 4 && request_1.status == 200) {
                    _this.setState(toSquare_1.rankIndex, toSquare_1.columnIndex, _this.getState(fromSquare_1.rankIndex, fromSquare_1.columnIndex));
                    _this.setState(fromSquare_1.rankIndex, fromSquare_1.columnIndex, ' ');
                    _this.showChessBoard();
                }
            };
            this.moveFrom = null;
        }
    };
    ChessBoardBuilder.prototype.getMove = function (fromSquare, toSquare) {
        return fromSquare.toString(this.whiteOnTopWhenShow) + toSquare.toString(this.whiteOnTopWhenShow);
    };
    ChessBoardBuilder.prototype.getSquare = function (square) {
        var rank = parseInt(square.id[1]);
        var column = square.id.charCodeAt(0);
        return this.isWhiteOnTopInStateRepresentation() ?
            new Square(h.charCodeAt(0) - column, rank - 1) :
            new Square(column - a.charCodeAt(0), 8 - rank);
    };
    ChessBoardBuilder.prototype.charShift = function (ch, shift) {
        return String.fromCharCode(ch.charCodeAt(0) + shift);
    };
    ChessBoardBuilder.prototype.getColumnText = function (columnIndex) {
        return this.whiteOnTopWhenShow ? this.charShift(h, -columnIndex) : this.charShift(a, columnIndex);
    };
    ChessBoardBuilder.prototype.isWhiteOnTopInStateRepresentation = function () {
        return InitialState[0][0] == '♖';
    };
    ChessBoardBuilder.prototype.getState = function (rankIndex, columnIndex) {
        return State[rankIndex][columnIndex];
    };
    ChessBoardBuilder.prototype.setState = function (rankIndex, columnIndex, value) {
        State[rankIndex][columnIndex] = value;
    };
    ChessBoardBuilder.prototype.resetStates = function () {
        for (var rankIndex = 0; rankIndex < 8; rankIndex++) {
            State[rankIndex] = InitialState[rankIndex].map(function (x) { return x; });
        }
    };
    ChessBoardBuilder.prototype.showChessBoard = function (whiteOnTopWhenShow) {
        if (whiteOnTopWhenShow === void 0) { whiteOnTopWhenShow = undefined; }
        if (whiteOnTopWhenShow !== undefined) {
            this.whiteOnTopWhenShow = whiteOnTopWhenShow;
        }
        var board = document.getElementsByTagName(table)[0];
        if (board) {
            board.remove();
            this.moveFrom = null;
        }
        this.createChessBoard();
    };
    ChessBoardBuilder.prototype.switchSide = function () {
        this.showChessBoard(!this.whiteOnTopWhenShow);
    };
    return ChessBoardBuilder;
}());
export { ChessBoardBuilder };
//# sourceMappingURL=data:application/json;base64,